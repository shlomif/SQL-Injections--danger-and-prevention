#include "shlomif-shlomif-article.wml"
<article_subject "SQL Injections" />
<article_description "SQL Injections - why are they dangerous and how to avoid them" />
<article_keywords "SQL, injections, database, security" />

<h2 id="intro">Introduction</h2>

<p>
Most database servers out there have standarised on using a query syntax
derived from <a href="http://en.wikipedia.org/wiki/SQL">SQL - The
Structured Query Language</a>, where one can use text queries based on
SQL commands such as 
<a href="http://en.wikipedia.org/wiki/Select_(SQL)">SELECT</a> or
<a href="http://en.wikipedia.org/wiki/Insert_(SQL)">INSERT</a> to
request data or modify it. Since we normally query based on user requests,
the naïve solution for cutomising the SQL queries to input from the user
has been to include this user-derived data inside the queries text. 
</p>

<p>
<a href="http://en.wikipedia.org/wiki/SQL_injection">SQL injections</a> 
are a common form of vulnerability in applications that are using 
SQL databases, which are caused by the practice of including arbitrary
data direclty inside the SQL queries. This article will explain what SQL 
injections are, why they are dangerous and give some advice on how to avoid
them.
</p>

<h2 id="what_are_sql_injections">What are SQL Injections?</h2>

<p>
Let's suppose we have the following table definition in an 
<a href="http://www.mysql.com/">MySQL</a> database called test_injection1:
</p>

<pre>
CREATE TABLE names (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR (255)
);
</pre>

<p>
Let's say we've written a program to insert a new name into the
<tt>names</tt> table like so:
</p>

<pre>
print( "Enter a name to insert:\n" )
name = input()

dbh = Mysql.real_connect(
    "localhost", user, password, "test_injection1", 
    nil, nil, Mysql::CLIENT_MULTI_STATEMENTS
)

dbh.query(
    "INSERT INTO names (id, name) VALUES (null, " + name + ")" 
)
</pre>

<p>
(It's written in <a href="http://www.ruby-lang.org/en/">Ruby</a>, but should 
be easy to understand for people who are not familiar with it.)
</p>

<p>
As one can see this program passes the name directly as the field argument
in the SQL. It works if we enter a number:
</p>

<pre>
$ ruby insert-without-quotes.rb
Enter a name to insert:
150
</pre>

<p>
But if we try to insert some letters, we get: 
</p>

<pre>
$ ruby insert-without-quotes.rb
Enter a name to insert:
Jake
insert-without-quotes.rb:18:in `query': Unknown column 'Jake' in 'field list' (Mysql::Error)
        from insert-without-quotes.rb:18
</pre>

<p>
The important thing here is the "Unknown column" error that we get from 
MySQL. What happens is that the SQL back-end does not know how to understand
the bare words. Therefore, we must enclose the string in the SQL standard
single quotes (<tt>'…'</tt>). This makes our code the following:
</p>

<pre>
print( "Enter a name to insert:\n" )
name = input()

dbh = Mysql.real_connect(
    "localhost", user, password, "test_injection1", 
    nil, nil, Mysql::CLIENT_MULTI_STATEMENTS
)

dbh.query(
    "INSERT INTO names (id, name) VALUES (null, " + "'" + name + "'" + ")" 
)
</pre>

<p>
This seems to work fine:
</p>

<pre>
$ ruby insert-with-quotes.rb
Enter a name to insert:
Jake
$ ruby insert-with-quotes.rb
Enter a name to insert:
Sophie
$ mysql test_injection1
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1058
Server version: 5.1.34 Mandriva Linux - MySQL Standard Edition (GPL)

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt;  SELECT * FROM names ;
+----+--------+
| id | name   |
+----+--------+
|  1 | Jake   |
|  2 | Sophie |
+----+--------+
2 rows in set (0.03 sec)
</pre>

<p>
But is it really bullet-proof? Notice that we inserted the name field directly
into the SQL. What will happen if it contains single-quotes that terminate 
the string prematurely. The answer is that in case it may either simply fail:
</p>

<pre>
$ ruby insert-with-quotes.rb
Enter a name to insert:
Ralph O'Henry
insert-with-quotes.rb:18:in `query': You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'Henry')' at line 1 (Mysql::Error)
        from insert-with-quotes.rb:18
</pre>

<p>
But since we can terminate the string, and then proceed to insert arbitrary
SQL, it could be much worse:
</p>

<pre>
$ ruby insert-with-quotes.rb
Enter a name to insert:
a');DROP TABLE names; SELECT * FROM data WHERE (name LIKE '%
$ mysql test_injection1
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1090
Server version: 5.1.34 Mandriva Linux - MySQL Standard Edition (GPL)

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; SELECT * FROM names ;
ERROR 1146 (42S02): Table 'test_injection1.names' doesn't exist
</pre>

<p>
So looking at the database, we see that the "names" table have
been dropped! What happened? Due to the way the SQL portion was inserted 
directly between the quotes, our query has become the following:
</p>

<pre>
INSERT INTO names (id, name) VALUES (null, 'a');
DROP TABLE names;
SELECT * FROM data WHERE (name LIKE '%')
</pre>

<p>
These are in fact three SQL statements grouped into one: the first inserts
a dummy value into names. The second drops the table, and the third forms
a well-formed query that will be compilable by strict SQL engines but that
would in fact just serve to terminate the rest of the query passed
by the code.
</p>

<p>
Even if the interface to the database did not allow us to execute as many 
statements as we'd like, then SQL injection attacks can still do a lot of 
damage. For example the following example taken from <a href="http://en.wikipedia.org/wiki/SQL_injection">the Wikipedia page about SQL injections</a>:
</p>

<p>
With the code:
</p>

<pre>
statement = "SELECT * FROM users WHERE name = '" + userName + "';"
</pre>

<p>
And the following value of the userName variable:
</p>

<pre>
a' or 't'='t
</pre>

<p>
Then the query becomes:
</p>

<pre>
SELECT * FROM users WHERE name = 'a' OR 't'='t';
</pre>

<p>
And as such the WHERE condition always evaluates to true, bypassing potential
security measurements.
</p>

<h2 id="the_danger">The Danger of SQL Injection</h2>

<p>
SQL injection vulnerabilities are extremely dangerous. Reportedly
<a href="http://www.rimmkaufman.com/rkgblog/2006/09/27/11-of-sites-vulnerable-to-sql-injection-is-yours/">at 
least 11% of the Internet's web-sites are vulnerable to SQL injection</a> 
and it is featured in <a href="http://www.sans.org/top25errors/">The SANS 
Institute's "Top 25 Most Dangerous Programming Errors"</a>. There was
also <a href="http://xkcd.com/327/">an xkcd comic strip about it</a>.
</p>

<p>
<a href="http://blog.wired.com/monkeybites/2008/04/microsoft-datab.html">Wired
reported on an attack</a> that caused half a million servers to be infected
using an SQL injection vulnerability.
</p>

<h2 id="defending">How to defend against SQL Injections</h2>

<p>
There are several ways a conscious programmer can defend against SQL
injection vulnerabilities. The first way is to use the database interface's
"quote" or "escape" function to escape a string before inserting into the
SQL query. PHP+MySQL have 
<a href="http://php.net/mysql_real_escape_string">mysql_real_escape_string</a>
for that, while <a href="http://dbi.perl.org/">Perl's DBI</a> has 
<tt>$dbh-&gt;quote</tt>, and other languages and backend combinations have
other functions. Note that sometimes these functions return an embeddable 
portion of the SQL string that should be inserted into a larger SQL string. 
Like so:
</p>

<pre>
query = "INSERT INTO names (id, name) VALUES (null, '" + escape(name) "')";
</pre>

<p>
And sometimes they return an entire, quoted SQL expression:
</p>

<pre>
query = sprintf("INSERT INTO names (id, name) VALUES (null, %s)", quote(name));
</pre>

<p>
Consult the documentation for what is the case. If it is the latter, then
you must pass the rest of the quoted string to the quote function.
</p>

<p>
An even better way to protect against the possibility of an SQL injection
is to use <a href="http://en.wikipedia.org/wiki/SQL_injection#Using_Parameterized_Statements">placeholders</a>. They work by designating various places inside
the query as placeholders for values, which are then filled when the
query is executed. So our pseudo-code will look like:
</p>

<pre>
insert_query = prepare("INSERT INTO names (id, name) VALUES (null, ?)");
.
.
.
insert_query.execute(name1);
insert_query.execute(name2);
insert_query.execute("String with single-quotes - ' - won't break.");
</pre>

<p>
Notice the "?" at the query, and the fact that we can pass the raw,
unprocessed, variable as is to the query in its place. Not only is this very 
secure, but preparing a statement and executing it several times with different
parameters, is also a useful optimisation technique in most modern SQL
databases. This is because the database backend can compile the query in
advance and only substitute parameters upon execution.
</p>

<p>
Some database interfaces have named placeholders (for example, using ":name"
or ":address") instead of the positional "?" placeholders. They are 
preferable because they can be re-used in the same query, and are harder
to mix up when calling execute.
</p>

<h3 id="regex">Escaping SQL inside Regular Expressions</h3>

<p>
<a href="http://phroggy.com/weblog/63.html">phroggy reports on another 
variation on SQL injection</a>. Essentially, when we use the 
<a href="http://www.infogoal.com/sql/sql-like.htm">LIKE operator</a>,
it matches a string against a pattern with '%' (any number of zero or
more characters) and '_' (any single character). If part of it is a 
string that is input from the user, then the pattern special characters in the 
string should be escaped as well.
</p>

<p>
This is also true when we invoke the database's more POSIX-like or Perl-like
regular expressions, in which case we may have more characters that need
escaping.
</p>

<h3 id="other_way">Other Measures to Reduce the Danger of 
SQL Injection</h3>

<p>
There are other ways, that are helpful to reduce the danger of SQL injections.
They are not a substitute for properly using placeholders or escaping, but they
are still helpful to reduce the possible damage an attacker can cause. First
of all it may be a good idea to make sure only one query can be executed
by a single "execute()" call, so the "DROP TABLE" example given above won't 
work. Consult your database driver's documentation for how to achieve at that.
</p>

<p>
Another useful measure is to make sure that the database user that executes the
queries does not have extraneous permissions that will allow it to do much
damage in case an SQL injection is found. 
</p>

<p>
Finally, you should consider deploying a database firewall such as
<a href="http://www.greensql.net/about">GreenSQL</a>, which detects and
many harmful variants of SQL injections and can prevent them from doing
a lot of damage.
</p>

<h2 id="summary">Summary</h2>

<p>
SQL injections pose a big risk to the security of applications and data that
work with an SQL database. We hope this article gave you the necessary tools
and knowledge to write safer SQL-calling code that won't be vulnerable
to this issue.
</p>
